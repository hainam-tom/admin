#!/bin/bashCONFIG_FILE="$HOME/api_setup.conf"LOG_FILE="$HOME/api_setup.log"# Function to log messageslog_message() {    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"}# Function to install a packageinstall_package() {    local package_name="$1"    if ! dpkg -s "$package_name" &> /dev/null; then        log_message "Installing $package_name..."        sudo apt-get update -y && sudo apt-get install -y "$package_name"    else        log_message "$package_name is already installed."    fi}# Function to clone a Git repositoryclone_repository() {    local repo_url="$1"    local target_dir="$2"    if [ ! -d "$target_dir" ]; then        log_message "Cloning repository from $repo_url to $target_dir..."        git clone "$repo_url" "$target_dir"    else        log_message "Directory $target_dir already exists. Skipping cloning."    fi}# Function to start the API and web serversstart_servers() {    local api_dir="$1"    local api_port="$2"    local website_dir="$3"    local web_port="$4"    local background_running="$5"    log_message "Starting API server on port $api_port..."    (cd "$api_dir" && json-server --watch hainam.json --port "$api_port" > "$api_dir/api_server.log" 2>&1) &    log_message "Starting web server on port $web_port..."    (cd "$website_dir" && http-server -p "$web_port" > "$website_dir/web_server.log" 2>&1) &    if [[ "$background_running" == "true" ]]; then        log_message "Both servers are running in the background."    else        log_message "Both servers are running in the foreground."    fi}# Function to uninstall everythinguninstall_all() {    read -p "Are you sure you want to uninstall everything? (y/n) " confirm    if [[ "$confirm" == "y" ]]; then        pkill -f json-server        pkill -f http-server        rm -rf "$api_dir/api_jsa37" "$website_dir"        log_message "Uninstallation complete."    else        log_message "Uninstallation canceled."    fi}# Function to repair missing packagesrepair() {    log_message "Repairing missing packages..."    install_package "git"    install_package "nodejs"    npm install -g json-server http-server}# Load configuration file if it existsif [ -f "$CONFIG_FILE" ]; then    source "$CONFIG_FILE"fi# Main script executionecho "Choose action: 1) Install 2) Uninstall 3) Repair"read -r actioncase $action in    1)        install_package "git"        install_package "nodejs"        npm install -g json-server http-server        read -p "Enter directory for API repository: " api_dir        clone_repository "https://github.com/BuiThang652/api_jsa37.git" "$api_dir/api_jsa37"        read -p "Enter directory for website repository: " website_dir        clone_repository "https://github.com/hainam-tom/admin.git" "$website_dir"        read -p "API server port (default 3000): " api_port        read -p "Web server port (default 8080): " web_port        read -p "Run servers in background? (y/n) " bg_run        background_running="false"        [[ "$bg_run" == "y" ]] && background_running="true"        start_servers "$api_dir" "$api_port" "$website_dir" "$web_port" "$background_running"        ;;    2) uninstall_all ;;    3) repair ;;    *) echo "Invalid action selected." ;;esac